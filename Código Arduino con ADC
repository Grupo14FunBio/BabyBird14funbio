#include <SoftwareSerial.h>
//SoftwareSerial BT(2,3); //RX, TX
/*String nombre = "BABYBIRD"; //nombre que aparecerá
String password = "1234";*/

//Variables a usar
unsigned long inicio, fin;
int cont = 1, a = 0, lectura_emg;
float frecuencia, DifFrec, DifSe, Riesgo, SenhalMAX = 0, T;

//Pines
int EMG = 0, pin_led_buzzer = 13;

void setup()
{
  cli();
  Serial.begin(9600);
  //BT.begin(9600);
  pinMode(pin_led_buzzer,OUTPUT);
  pinMode(EMG,INPUT);
  
  DDRB |= (1 << DDB5); // This is the LED in the Arduino Board! PIN13.
  ADC_init();
  
  sei(); 
}

//Programa principal
void loop() {
  // put your main code here, to run repeatedly:
  /*if (ADC_GetData(0) > 512) { PORTB |= (1 << PORTB5);}
  else { PORTB &=~ (1 << PORTB5);}*/
  
  int lectura_emg = analogRead(EMG);
  float voltaje_emg = lectura_emg*(5.0/1023.0);
  
  if(cont==1){
    if(voltaje_emg>SenhalMAX){
      SenhalMAX = voltaje_emg;
    }
    else if(voltaje_emg<SenhalMAX){
      inicio=millis();
      cont=cont+1;
    }
  }
  else if(cont==2){
    if(voltaje_emg<=0.2){
      a=1;
    }
    if(a){
      if(voltaje_emg==SenhalMAX){
        fin=millis();
        cont=cont+1;
      }
    }
  }
  else{
    T=(fin-inicio)/1000.0;
    frecuencia = 1.0/T;
    if((frecuencia>=0.56)&&(SenhalMAX>=2.5)){
        digitalWrite(pin_led_buzzer,HIGH);
        DifFrec=frecuencia-0.56;
        DifSe=SenhalMAX-3.7;
        Riesgo=60+((DifFrec*50+DifSe*50)/2);
        //BT.println(Riesgo);
      }
     // else{
        //digitalWrite(pin_led_buzzer,LOW);
      //}
   
  }
  delay(1);

 /* if ((ADC_GetData(0) > 512)&&(frecuencia>=0.56)) { PORTB |= (1 << PORTB5);}
  else { PORTB &=~ (1 << PORTB5);}*/
 // No sabemos si usar el código de las líneas 74-75 o las del 60-69
}

void ADC_init(){
  // Output adjust --> setting ADLAR to 0
  ADMUX &=~ (1 << ADLAR); // This is to have sampled data in ADCH:ADCL format
  
  // Setting ref --> AVcc connected to 5V in Arduino
  ADMUX |= (1 << REFS0);
  ADMUX &=~ (1 << REFS1); 
  
  // Frequency divisor --> Check pag. 208 datasheet.
  // Frequency must be between 50kHz and 200kHz!
  // Then we select prescaler to 128 --> 16MHz/128 = 125kHz (within range!)
  ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
}

/* ---------- ADC GetData ---------- */
int ADC_GetData(int canal){
  // We need to select the input of the mux every time!
  ADMUX &= (0b11110000 << MUX0); // putting 0 to [MUX3 ... MUX0]
  ADMUX |= (canal << MUX0); // selecting the channel
  
  // We enable ADC after selecting the channel of the MUX and configuring.
  ADCSRA |= (1 << ADEN);
  delayMicroseconds(10); 
  // This function does modify the interruptions of the ATmega so be careful when to use it!
  // This delay is necessary because we are enabling the ADC before a sampling!
  // We could have done this without the delay by enabling the ADC before so it
  // has some time to initialize; however, for energy saving purposes we do it this
  // way. You should try the other way as an exercise.
  
  // This line start the conversion!
  ADCSRA |= (1 << ADSC);
  
  while (!(ADCSRA & (1 << ADIF))); // ADIF will be 1 when the conversion is finished.
  ADCSRA |= (1 << ADIF);  // We should restart the interruption flag manually because we are not using interruptions
  
  ADCSRA &=~ (1 << ADEN); // Let's turn off the ADC. For simulation it may not be necessary, but it is better to get used to it to save some power.
  
  return ADC;
}
